#![cfg(feature = "number-to-chinese")]

use chinese_number::{
    ChineseCase, ChineseCountMethod, ChineseVariant, NumberToChinese, NumberToChineseError,
};

macro_rules! test_group {
    ($case:expr, $method:expr) => {
        macro_rules! test {
            ($expect: expr,$value: expr) => {
                assert_eq!(
                    $expect,
                    $value.to_chinese(ChineseVariant::Traditional, $case, $method).unwrap()
                );
            };
        }

        #[allow(unused)]
        macro_rules! test_err {
            ($expect: expr,$value: expr) => {
                assert_eq!(
                    Err($expect),
                    $value.to_chinese(ChineseVariant::Traditional, $case, $method)
                );
            };
        }
    };
}

#[test]
fn to_uppercase_low() {
    test_group!(ChineseCase::Upper, ChineseCountMethod::Low);

    test!("壹佰貳拾柒", i8::MAX);
    test!("負壹佰貳拾捌", i8::MIN);
    test!("貳佰伍拾伍", u8::MAX);
    test!("參萬貳仟柒佰陸拾柒", i16::MAX);
    test!("負參萬貳仟柒佰陸拾捌", i16::MIN);
    test!("陸萬伍仟伍佰參拾伍", u16::MAX);
    test!("貳秭壹垓肆京柒兆肆億捌萬參仟陸佰肆拾柒", i32::MAX);
    test!("負貳秭壹垓肆京柒兆肆億捌萬參仟陸佰肆拾捌", i32::MIN);
    test!("肆秭貳垓玖京肆兆玖億陸萬柒仟貳佰玖拾伍", u32::MAX);
    test!("玖極玖載玖正玖澗玖溝玖穰玖秭玖垓玖京玖兆玖億玖萬玖仟玖佰玖拾玖", 9999999999999999i64);
    test!("負玖極玖載玖正玖澗玖溝玖穰玖秭玖垓玖京玖兆玖億玖萬玖仟玖佰玖拾玖", -9999999999999999i64);
    test!("玖極玖載玖正玖澗玖溝玖穰玖秭玖垓玖京玖兆玖億玖萬玖仟玖佰玖拾玖", 9999999999999999u64);
    test!("玖極玖載玖正玖澗玖溝玖穰玖秭玖垓玖京玖兆玖億玖萬玖仟玖佰玖拾玖", 9999999999999999i128);
    test!(
        "負玖極玖載玖正玖澗玖溝玖穰玖秭玖垓玖京玖兆玖億玖萬玖仟玖佰玖拾玖",
        -9999999999999999i128
    );
    test!("玖極玖載玖正玖澗玖溝玖穰玖秭玖垓玖京玖兆玖億玖萬玖仟玖佰玖拾玖", 9999999999999999u128);

    test!("壹佰貳拾參肆角陸分", 123.456f32);
    test!("負壹佰貳拾參肆角陸分", -123.456f32);
    test!("壹佰貳拾參肆角陸分", 123.456f64);
    test!("負壹佰貳拾參肆角陸分", -123.456f64);

    test_err!(NumberToChineseError::Overflow, i128::MAX);
    test_err!(NumberToChineseError::Underflow, i128::MIN);
    test_err!(NumberToChineseError::Overflow, u128::MAX);
    test_err!(NumberToChineseError::Overflow, f32::MAX);
    test_err!(NumberToChineseError::Underflow, f32::MIN);
    test_err!(NumberToChineseError::Overflow, f64::MAX);
    test_err!(NumberToChineseError::Underflow, f64::MIN);
}

#[test]
fn to_uppercase_ten_thousand() {
    test_group!(ChineseCase::Upper, ChineseCountMethod::TenThousand);

    test!("壹佰貳拾柒", i8::MAX);
    test!("負壹佰貳拾捌", i8::MIN);
    test!("貳佰伍拾伍", u8::MAX);
    test!("參萬貳仟柒佰陸拾柒", i16::MAX);
    test!("負參萬貳仟柒佰陸拾捌", i16::MIN);
    test!("陸萬伍仟伍佰參拾伍", u16::MAX);
    test!("貳拾壹億肆仟柒佰肆拾捌萬參仟陸佰肆拾柒", i32::MAX);
    test!("負貳拾壹億肆仟柒佰肆拾捌萬參仟陸佰肆拾捌", i32::MIN);
    test!("肆拾貳億玖仟肆佰玖拾陸萬柒仟貳佰玖拾伍", u32::MAX);
    test!("玖佰貳拾貳京參仟參佰柒拾貳兆零參佰陸拾捌億伍仟肆佰柒拾柒萬伍仟捌佰零柒", i64::MAX);
    test!("負玖佰貳拾貳京參仟參佰柒拾貳兆零參佰陸拾捌億伍仟肆佰柒拾柒萬伍仟捌佰零捌", i64::MIN);
    test!("壹仟捌佰肆拾肆京陸仟柒佰肆拾肆兆零柒佰參拾柒億零玖佰伍拾伍萬壹仟陸佰壹拾伍", u64::MAX);
    test!("壹佰柒拾澗壹仟肆佰壹拾壹溝捌仟參佰肆拾陸穰零肆佰陸拾玖秭貳仟參佰壹拾柒垓參仟壹佰陸拾捌京柒仟參佰零參兆柒仟壹佰伍拾捌億捌仟肆佰壹拾萬伍仟柒佰貳拾柒",i128::MAX);
    test!("負壹佰柒拾澗壹仟肆佰壹拾壹溝捌仟參佰肆拾陸穰零肆佰陸拾玖秭貳仟參佰壹拾柒垓參仟壹佰陸拾捌京柒仟參佰零參兆柒仟壹佰伍拾捌億捌仟肆佰壹拾萬伍仟柒佰貳拾捌",i128::MIN);
    test!("參佰肆拾澗貳仟捌佰貳拾參溝陸仟陸佰玖拾貳穰零玖佰參拾捌秭肆仟陸佰參拾肆垓陸仟參佰參拾柒京肆仟陸佰零柒兆肆仟參佰壹拾柒億陸仟捌佰貳拾壹萬壹仟肆佰伍拾伍",u128::MAX);

    test!("壹佰貳拾參肆角陸分", 123.456f32);
    test!("負壹佰貳拾參肆角陸分", -123.456f32);
    test!("壹佰貳拾參肆角陸分", 123.456f64);
    test!("負壹佰貳拾參肆角陸分", -123.456f64);

    test!("參佰肆拾澗貳仟捌佰貳拾參溝肆仟陸佰陸拾參穰捌仟伍佰貳拾捌秭捌仟伍佰玖拾捌垓壹仟壹佰柒拾京肆仟壹佰捌拾參兆肆仟捌佰肆拾伍億壹仟陸佰玖拾貳萬伍仟肆佰肆拾",f32::MAX);
    test!("負參佰肆拾澗貳仟捌佰貳拾參溝肆仟陸佰陸拾參穰捌仟伍佰貳拾捌秭捌仟伍佰玖拾捌垓壹仟壹佰柒拾京肆仟壹佰捌拾參兆肆仟捌佰肆拾伍億壹仟陸佰玖拾貳萬伍仟肆佰肆拾",f32::MIN);
    test!("玖仟玖佰玖拾玖極玖仟玖佰玖拾玖載玖仟玖佰玖拾玖正玖仟玖佰捌拾玖澗貳仟玖佰捌拾參溝捌仟伍佰伍拾貳穰零肆佰陸拾肆秭貳仟捌佰玖拾貳垓玖仟陸佰伍拾參京肆仟壹佰陸拾兆陸仟零貳拾壹億柒仟陸佰陸拾捌萬肆仟零參拾貳",1e52f64 - 1e37);
    test!("負玖仟玖佰玖拾玖極玖仟玖佰玖拾玖載玖仟玖佰玖拾玖正玖仟玖佰捌拾玖澗貳仟玖佰捌拾參溝捌仟伍佰伍拾貳穰零肆佰陸拾肆秭貳仟捌佰玖拾貳垓玖仟陸佰伍拾參京肆仟壹佰陸拾兆陸仟零貳拾壹億柒仟陸佰陸拾捌萬肆仟零參拾貳",-1e52f64 + 1e37);

    test_err!(NumberToChineseError::Overflow, f64::MAX);
    test_err!(NumberToChineseError::Underflow, f64::MIN);
}

#[test]
fn to_uppercase_middle() {
    test_group!(ChineseCase::Upper, ChineseCountMethod::Middle);

    test!("壹佰貳拾柒", i8::MAX);
    test!("負壹佰貳拾捌", i8::MIN);
    test!("貳佰伍拾伍", u8::MAX);
    test!("參萬貳仟柒佰陸拾柒", i16::MAX);
    test!("負參萬貳仟柒佰陸拾捌", i16::MIN);
    test!("陸萬伍仟伍佰參拾伍", u16::MAX);
    test!("貳拾壹億肆仟柒佰肆拾捌萬參仟陸佰肆拾柒", i32::MAX);
    test!("負貳拾壹億肆仟柒佰肆拾捌萬參仟陸佰肆拾捌", i32::MIN);
    test!("肆拾貳億玖仟肆佰玖拾陸萬柒仟貳佰玖拾伍", u32::MAX);
    test!("玖佰貳拾貳兆參仟參佰柒拾貳萬零參佰陸拾捌億伍仟肆佰柒拾柒萬伍仟捌佰零柒", i64::MAX);
    test!("負玖佰貳拾貳兆參仟參佰柒拾貳萬零參佰陸拾捌億伍仟肆佰柒拾柒萬伍仟捌佰零捌", i64::MIN);
    test!("壹仟捌佰肆拾肆兆陸仟柒佰肆拾肆萬零柒佰參拾柒億零玖佰伍拾伍萬壹仟陸佰壹拾伍", u64::MAX);
    test!("壹佰柒拾萬壹仟肆佰壹拾壹垓捌仟參佰肆拾陸萬零肆佰陸拾玖京貳仟參佰壹拾柒萬參仟壹佰陸拾捌兆柒仟參佰零參萬柒仟壹佰伍拾捌億捌仟肆佰壹拾萬伍仟柒佰貳拾柒",i128::MAX);
    test!("負壹佰柒拾萬壹仟肆佰壹拾壹垓捌仟參佰肆拾陸萬零肆佰陸拾玖京貳仟參佰壹拾柒萬參仟壹佰陸拾捌兆柒仟參佰零參萬柒仟壹佰伍拾捌億捌仟肆佰壹拾萬伍仟柒佰貳拾捌",i128::MIN);
    test!("參佰肆拾萬貳仟捌佰貳拾參垓陸仟陸佰玖拾貳萬零玖佰參拾捌京肆仟陸佰參拾肆萬陸仟參佰參拾柒兆肆仟陸佰零柒萬肆仟參佰壹拾柒億陸仟捌佰貳拾壹萬壹仟肆佰伍拾伍",u128::MAX);

    test!("壹佰貳拾參肆角陸分", 123.456f32);
    test!("負壹佰貳拾參肆角陸分", -123.456f32);
    test!("壹佰貳拾參肆角陸分", 123.456f64);
    test!("負壹佰貳拾參肆角陸分", -123.456f64);

    test!("參佰肆拾萬貳仟捌佰貳拾參垓肆仟陸佰陸拾參萬捌仟伍佰貳拾捌京捌仟伍佰玖拾捌萬壹仟壹佰柒拾兆肆仟壹佰捌拾參萬肆仟捌佰肆拾伍億壹仟陸佰玖拾貳萬伍仟肆佰肆拾",f32::MAX);
    test!("負參佰肆拾萬貳仟捌佰貳拾參垓肆仟陸佰陸拾參萬捌仟伍佰貳拾捌京捌仟伍佰玖拾捌萬壹仟壹佰柒拾兆肆仟壹佰捌拾參萬肆仟捌佰肆拾伍億壹仟陸佰玖拾貳萬伍仟肆佰肆拾",f32::MIN);
    test!("玖仟玖佰玖拾玖萬玖仟玖佰玖拾玖極玖仟玖佰玖拾玖萬玖仟玖佰玖拾壹載零壹佰貳拾玖萬貳仟捌佰伍拾捌正玖仟參佰玖拾捌萬壹仟肆佰陸拾貳澗零壹佰零柒萬壹仟壹佰陸拾柒溝伍仟玖佰貳拾玖萬肆仟貳佰陸拾柒穰壹仟貳佰壹拾萬壹仟柒佰伍拾捌秭柒仟壹佰柒拾捌萬伍仟肆佰玖拾陸垓捌仟肆佰肆拾捌萬柒仟柒佰捌拾柒京捌仟陸佰貳拾柒萬柒仟柒佰陸拾貳兆貳仟伍佰陸拾萬壹仟零壹拾億零伍佰萬零柒佰零肆",1e96f64 - 1e81);
    test!("負玖仟玖佰玖拾玖萬玖仟玖佰玖拾玖極玖仟玖佰玖拾玖萬玖仟玖佰玖拾壹載零壹佰貳拾玖萬貳仟捌佰伍拾捌正玖仟參佰玖拾捌萬壹仟肆佰陸拾貳澗零壹佰零柒萬壹仟壹佰陸拾柒溝伍仟玖佰貳拾玖萬肆仟貳佰陸拾柒穰壹仟貳佰壹拾萬壹仟柒佰伍拾捌秭柒仟壹佰柒拾捌萬伍仟肆佰玖拾陸垓捌仟肆佰肆拾捌萬柒仟柒佰捌拾柒京捌仟陸佰貳拾柒萬柒仟柒佰陸拾貳兆貳仟伍佰陸拾萬壹仟零壹拾億零伍佰萬零柒佰零肆",-1e96f64 + 1e81);

    test_err!(NumberToChineseError::Overflow, f64::MAX);
    test_err!(NumberToChineseError::Underflow, f64::MIN);
}

#[test]
fn to_uppercase_high() {
    test_group!(ChineseCase::Upper, ChineseCountMethod::High);

    test!("壹佰貳拾柒", i8::MAX);
    test!("負壹佰貳拾捌", i8::MIN);
    test!("貳佰伍拾伍", u8::MAX);
    test!("參萬貳仟柒佰陸拾柒", i16::MAX);
    test!("負參萬貳仟柒佰陸拾捌", i16::MIN);
    test!("陸萬伍仟伍佰參拾伍", u16::MAX);
    test!("貳拾壹億肆仟柒佰肆拾捌萬參仟陸佰肆拾柒", i32::MAX);
    test!("負貳拾壹億肆仟柒佰肆拾捌萬參仟陸佰肆拾捌", i32::MIN);
    test!("肆拾貳億玖仟肆佰玖拾陸萬柒仟貳佰玖拾伍", u32::MAX);
    test!("玖佰貳拾貳兆參仟參佰柒拾貳萬零參佰陸拾捌億伍仟肆佰柒拾柒萬伍仟捌佰零柒", i64::MAX);
    test!("負玖佰貳拾貳兆參仟參佰柒拾貳萬零參佰陸拾捌億伍仟肆佰柒拾柒萬伍仟捌佰零捌", i64::MIN);
    test!("壹仟捌佰肆拾肆兆陸仟柒佰肆拾肆萬零柒佰參拾柒億零玖佰伍拾伍萬壹仟陸佰壹拾伍", u64::MAX);
    test!("壹佰柒拾萬壹仟肆佰壹拾壹京捌仟參佰肆拾陸萬零肆佰陸拾玖億貳仟參佰壹拾柒萬參仟壹佰陸拾捌兆柒仟參佰零參萬柒仟壹佰伍拾捌億捌仟肆佰壹拾萬伍仟柒佰貳拾柒",i128::MAX);
    test!("負壹佰柒拾萬壹仟肆佰壹拾壹京捌仟參佰肆拾陸萬零肆佰陸拾玖億貳仟參佰壹拾柒萬參仟壹佰陸拾捌兆柒仟參佰零參萬柒仟壹佰伍拾捌億捌仟肆佰壹拾萬伍仟柒佰貳拾捌",i128::MIN);
    test!("參佰肆拾萬貳仟捌佰貳拾參京陸仟陸佰玖拾貳萬零玖佰參拾捌億肆仟陸佰參拾肆萬陸仟參佰參拾柒兆肆仟陸佰零柒萬肆仟參佰壹拾柒億陸仟捌佰貳拾壹萬壹仟肆佰伍拾伍",u128::MAX);

    test!("壹佰貳拾參肆角陸分", 123.456f32);
    test!("負壹佰貳拾參肆角陸分", -123.456f32);
    test!("壹佰貳拾參肆角陸分", 123.456f64);
    test!("負壹佰貳拾參肆角陸分", -123.456f64);

    test!("參佰肆拾萬貳仟捌佰貳拾參京肆仟陸佰陸拾參萬捌仟伍佰貳拾捌億捌仟伍佰玖拾捌萬壹仟壹佰柒拾兆肆仟壹佰捌拾參萬肆仟捌佰肆拾伍億壹仟陸佰玖拾貳萬伍仟肆佰肆拾",f32::MAX);
    test!("負參佰肆拾萬貳仟捌佰貳拾參京肆仟陸佰陸拾參萬捌仟伍佰貳拾捌億捌仟伍佰玖拾捌萬壹仟壹佰柒拾兆肆仟壹佰捌拾參萬肆仟捌佰肆拾伍億壹仟陸佰玖拾貳萬伍仟肆佰肆拾",f32::MIN);
    test!("壹萬柒仟玖佰柒拾陸兆玖仟參佰壹拾參萬肆仟捌佰陸拾貳億參仟壹佰伍拾柒萬零捌佰壹拾肆京伍仟貳佰柒拾肆萬貳仟參佰柒拾參億壹仟柒佰零肆萬參仟伍佰陸拾柒兆玖仟捌佰零柒萬零伍佰陸拾柒億伍仟貳佰伍拾捌萬肆仟肆佰玖拾玖穰陸仟伍佰玖拾捌萬玖仟壹佰柒拾肆億柒仟陸佰捌拾萬參仟壹佰伍拾柒兆貳仟陸佰零柒萬捌仟零貳億捌仟伍佰參拾捌萬柒仟陸佰零伍京捌仟玖佰伍拾伍萬捌仟陸佰參拾貳億柒仟陸佰陸拾捌萬柒仟捌佰壹拾柒兆壹仟伍佰肆拾萬肆仟伍佰捌拾玖億伍仟參佰伍拾壹萬肆仟參佰捌拾貳垓肆仟陸佰肆拾貳萬參仟肆佰參拾貳億壹仟參佰貳拾陸萬捌仟捌佰玖拾肆兆陸仟肆佰壹拾捌萬貳仟柒佰陸拾捌億肆仟陸佰柒拾伍萬肆仟陸佰柒拾京參仟伍佰參拾柒萬伍仟壹佰陸拾玖億捌仟陸佰零肆萬玖仟玖佰壹拾兆伍仟柒佰陸拾伍萬伍仟壹佰貳拾捌億貳仟零柒拾陸萬貳仟肆佰伍拾肆秭玖仟零玖萬零參佰捌拾玖億參仟貳佰捌拾玖萬肆仟肆佰零柒兆伍仟捌佰陸拾捌萬伍仟零捌拾肆億伍仟伍佰壹拾參萬參仟玖佰肆拾貳京參仟零肆拾伍萬捌仟參佰貳拾參億陸仟玖佰零參萬貳仟貳佰貳拾玖兆肆仟捌佰壹拾陸萬伍仟捌佰零捌億伍仟伍佰玖拾參萬參仟貳佰壹拾貳垓參仟參佰肆拾捌萬貳仟柒佰肆拾柒億玖仟柒佰捌拾貳萬陸仟貳佰零肆兆壹仟肆佰肆拾柒萬貳仟參佰壹拾陸億捌仟柒佰參拾捌萬壹仟柒佰柒拾壹京捌仟零玖拾壹萬玖仟貳佰玖拾玖億捌仟捌佰壹拾貳萬伍仟零肆拾兆肆仟零貳拾陸萬壹仟捌佰肆拾壹億貳仟肆佰捌拾伍萬捌仟參佰陸拾捌",f64::MAX);
    test!("負壹萬柒仟玖佰柒拾陸兆玖仟參佰壹拾參萬肆仟捌佰陸拾貳億參仟壹佰伍拾柒萬零捌佰壹拾肆京伍仟貳佰柒拾肆萬貳仟參佰柒拾參億壹仟柒佰零肆萬參仟伍佰陸拾柒兆玖仟捌佰零柒萬零伍佰陸拾柒億伍仟貳佰伍拾捌萬肆仟肆佰玖拾玖穰陸仟伍佰玖拾捌萬玖仟壹佰柒拾肆億柒仟陸佰捌拾萬參仟壹佰伍拾柒兆貳仟陸佰零柒萬捌仟零貳億捌仟伍佰參拾捌萬柒仟陸佰零伍京捌仟玖佰伍拾伍萬捌仟陸佰參拾貳億柒仟陸佰陸拾捌萬柒仟捌佰壹拾柒兆壹仟伍佰肆拾萬肆仟伍佰捌拾玖億伍仟參佰伍拾壹萬肆仟參佰捌拾貳垓肆仟陸佰肆拾貳萬參仟肆佰參拾貳億壹仟參佰貳拾陸萬捌仟捌佰玖拾肆兆陸仟肆佰壹拾捌萬貳仟柒佰陸拾捌億肆仟陸佰柒拾伍萬肆仟陸佰柒拾京參仟伍佰參拾柒萬伍仟壹佰陸拾玖億捌仟陸佰零肆萬玖仟玖佰壹拾兆伍仟柒佰陸拾伍萬伍仟壹佰貳拾捌億貳仟零柒拾陸萬貳仟肆佰伍拾肆秭玖仟零玖萬零參佰捌拾玖億參仟貳佰捌拾玖萬肆仟肆佰零柒兆伍仟捌佰陸拾捌萬伍仟零捌拾肆億伍仟伍佰壹拾參萬參仟玖佰肆拾貳京參仟零肆拾伍萬捌仟參佰貳拾參億陸仟玖佰零參萬貳仟貳佰貳拾玖兆肆仟捌佰壹拾陸萬伍仟捌佰零捌億伍仟伍佰玖拾參萬參仟貳佰壹拾貳垓參仟參佰肆拾捌萬貳仟柒佰肆拾柒億玖仟柒佰捌拾貳萬陸仟貳佰零肆兆壹仟肆佰肆拾柒萬貳仟參佰壹拾陸億捌仟柒佰參拾捌萬壹仟柒佰柒拾壹京捌仟零玖拾壹萬玖仟貳佰玖拾玖億捌仟捌佰壹拾貳萬伍仟零肆拾兆肆仟零貳拾陸萬壹仟捌佰肆拾壹億貳仟肆佰捌拾伍萬捌仟參佰陸拾捌",f64::MIN);
}

#[test]
fn to_lowercase_low() {
    test_group!(ChineseCase::Lower, ChineseCountMethod::Low);

    test!("一百二十七", i8::MAX);
    test!("負一百二十八", i8::MIN);
    test!("二百五十五", u8::MAX);
    test!("三萬二千七百六十七", i16::MAX);
    test!("負三萬二千七百六十八", i16::MIN);
    test!("六萬五千五百三十五", u16::MAX);
    test!("二秭一垓四京七兆四億八萬三千六百四十七", i32::MAX);
    test!("負二秭一垓四京七兆四億八萬三千六百四十八", i32::MIN);
    test!("四秭二垓九京四兆九億六萬七千二百九十五", u32::MAX);
    test!("九極九載九正九澗九溝九穰九秭九垓九京九兆九億九萬九千九百九十九", 9999999999999999i64);
    test!("負九極九載九正九澗九溝九穰九秭九垓九京九兆九億九萬九千九百九十九", -9999999999999999i64);
    test!("九極九載九正九澗九溝九穰九秭九垓九京九兆九億九萬九千九百九十九", 9999999999999999u64);
    test!("九極九載九正九澗九溝九穰九秭九垓九京九兆九億九萬九千九百九十九", 9999999999999999i128);
    test!(
        "負九極九載九正九澗九溝九穰九秭九垓九京九兆九億九萬九千九百九十九",
        -9999999999999999i128
    );
    test!("九極九載九正九澗九溝九穰九秭九垓九京九兆九億九萬九千九百九十九", 9999999999999999u128);

    test!("一百二十三四角六分", 123.456f32);
    test!("負一百二十三四角六分", -123.456f32);
    test!("一百二十三四角六分", 123.456f64);
    test!("負一百二十三四角六分", -123.456f64);

    test_err!(NumberToChineseError::Overflow, i128::MAX);
    test_err!(NumberToChineseError::Underflow, i128::MIN);
    test_err!(NumberToChineseError::Overflow, u128::MAX);
    test_err!(NumberToChineseError::Overflow, f32::MAX);
    test_err!(NumberToChineseError::Underflow, f32::MIN);
    test_err!(NumberToChineseError::Overflow, f64::MAX);
    test_err!(NumberToChineseError::Underflow, f64::MIN);
}

#[test]
fn to_lowercase_ten_thousand() {
    test_group!(ChineseCase::Lower, ChineseCountMethod::TenThousand);

    test!("一百二十七", i8::MAX);
    test!("負一百二十八", i8::MIN);
    test!("二百五十五", u8::MAX);
    test!("三萬二千七百六十七", i16::MAX);
    test!("負三萬二千七百六十八", i16::MIN);
    test!("六萬五千五百三十五", u16::MAX);
    test!("二十一億四千七百四十八萬三千六百四十七", i32::MAX);
    test!("負二十一億四千七百四十八萬三千六百四十八", i32::MIN);
    test!("四十二億九千四百九十六萬七千二百九十五", u32::MAX);
    test!("九百二十二京三千三百七十二兆零三百六十八億五千四百七十七萬五千八百零七", i64::MAX);
    test!("負九百二十二京三千三百七十二兆零三百六十八億五千四百七十七萬五千八百零八", i64::MIN);
    test!("一千八百四十四京六千七百四十四兆零七百三十七億零九百五十五萬一千六百一十五", u64::MAX);
    test!("一百七十澗一千四百一十一溝八千三百四十六穰零四百六十九秭二千三百一十七垓三千一百六十八京七千三百零三兆七千一百五十八億八千四百一十萬五千七百二十七",i128::MAX);
    test!("負一百七十澗一千四百一十一溝八千三百四十六穰零四百六十九秭二千三百一十七垓三千一百六十八京七千三百零三兆七千一百五十八億八千四百一十萬五千七百二十八",i128::MIN);
    test!("三百四十澗二千八百二十三溝六千六百九十二穰零九百三十八秭四千六百三十四垓六千三百三十七京四千六百零七兆四千三百一十七億六千八百二十一萬一千四百五十五",u128::MAX);

    test!("一百二十三四角六分", 123.456f32);
    test!("負一百二十三四角六分", -123.456f32);
    test!("一百二十三四角六分", 123.456f64);
    test!("負一百二十三四角六分", -123.456f64);

    test!("三百四十澗二千八百二十三溝四千六百六十三穰八千五百二十八秭八千五百九十八垓一千一百七十京四千一百八十三兆四千八百四十五億一千六百九十二萬五千四百四十",f32::MAX);
    test!("負三百四十澗二千八百二十三溝四千六百六十三穰八千五百二十八秭八千五百九十八垓一千一百七十京四千一百八十三兆四千八百四十五億一千六百九十二萬五千四百四十",f32::MIN);
    test!("九千九百九十九極九千九百九十九載九千九百九十九正九千九百八十九澗二千九百八十三溝八千五百五十二穰零四百六十四秭二千八百九十二垓九千六百五十三京四千一百六十兆六千零二十一億七千六百六十八萬四千零三十二",1e52f64 - 1e37);
    test!("負九千九百九十九極九千九百九十九載九千九百九十九正九千九百八十九澗二千九百八十三溝八千五百五十二穰零四百六十四秭二千八百九十二垓九千六百五十三京四千一百六十兆六千零二十一億七千六百六十八萬四千零三十二",-1e52f64 + 1e37);

    test_err!(NumberToChineseError::Overflow, f64::MAX);
    test_err!(NumberToChineseError::Underflow, f64::MIN);
}

#[test]
fn to_lowercase_middle() {
    test_group!(ChineseCase::Lower, ChineseCountMethod::Middle);

    test!("一百二十七", i8::MAX);
    test!("負一百二十八", i8::MIN);
    test!("二百五十五", u8::MAX);
    test!("三萬二千七百六十七", i16::MAX);
    test!("負三萬二千七百六十八", i16::MIN);
    test!("六萬五千五百三十五", u16::MAX);
    test!("二十一億四千七百四十八萬三千六百四十七", i32::MAX);
    test!("負二十一億四千七百四十八萬三千六百四十八", i32::MIN);
    test!("四十二億九千四百九十六萬七千二百九十五", u32::MAX);
    test!("九百二十二兆三千三百七十二萬零三百六十八億五千四百七十七萬五千八百零七", i64::MAX);
    test!("負九百二十二兆三千三百七十二萬零三百六十八億五千四百七十七萬五千八百零八", i64::MIN);
    test!("一千八百四十四兆六千七百四十四萬零七百三十七億零九百五十五萬一千六百一十五", u64::MAX);
    test!("一百七十萬一千四百一十一垓八千三百四十六萬零四百六十九京二千三百一十七萬三千一百六十八兆七千三百零三萬七千一百五十八億八千四百一十萬五千七百二十七",i128::MAX);
    test!("負一百七十萬一千四百一十一垓八千三百四十六萬零四百六十九京二千三百一十七萬三千一百六十八兆七千三百零三萬七千一百五十八億八千四百一十萬五千七百二十八",i128::MIN);
    test!("三百四十萬二千八百二十三垓六千六百九十二萬零九百三十八京四千六百三十四萬六千三百三十七兆四千六百零七萬四千三百一十七億六千八百二十一萬一千四百五十五",u128::MAX);

    test!("一百二十三四角六分", 123.456f32);
    test!("負一百二十三四角六分", -123.456f32);
    test!("一百二十三四角六分", 123.456f64);
    test!("負一百二十三四角六分", -123.456f64);

    test!("三百四十萬二千八百二十三垓四千六百六十三萬八千五百二十八京八千五百九十八萬一千一百七十兆四千一百八十三萬四千八百四十五億一千六百九十二萬五千四百四十",f32::MAX);
    test!("負三百四十萬二千八百二十三垓四千六百六十三萬八千五百二十八京八千五百九十八萬一千一百七十兆四千一百八十三萬四千八百四十五億一千六百九十二萬五千四百四十",f32::MIN);
    test!("九千九百九十九萬九千九百九十九極九千九百九十九萬九千九百九十一載零一百二十九萬二千八百五十八正九千三百九十八萬一千四百六十二澗零一百零七萬一千一百六十七溝五千九百二十九萬四千二百六十七穰一千二百一十萬一千七百五十八秭七千一百七十八萬五千四百九十六垓八千四百四十八萬七千七百八十七京八千六百二十七萬七千七百六十二兆二千五百六十萬一千零一十億零五百萬零七百零四",1e96f64 - 1e81);
    test!("負九千九百九十九萬九千九百九十九極九千九百九十九萬九千九百九十一載零一百二十九萬二千八百五十八正九千三百九十八萬一千四百六十二澗零一百零七萬一千一百六十七溝五千九百二十九萬四千二百六十七穰一千二百一十萬一千七百五十八秭七千一百七十八萬五千四百九十六垓八千四百四十八萬七千七百八十七京八千六百二十七萬七千七百六十二兆二千五百六十萬一千零一十億零五百萬零七百零四",-1e96f64 + 1e81);

    test_err!(NumberToChineseError::Overflow, f64::MAX);
    test_err!(NumberToChineseError::Underflow, f64::MIN);
}

#[test]
fn to_lowercase_high() {
    test_group!(ChineseCase::Lower, ChineseCountMethod::High);

    test!("一百二十七", i8::MAX);
    test!("負一百二十八", i8::MIN);
    test!("二百五十五", u8::MAX);
    test!("三萬二千七百六十七", i16::MAX);
    test!("負三萬二千七百六十八", i16::MIN);
    test!("六萬五千五百三十五", u16::MAX);
    test!("二十一億四千七百四十八萬三千六百四十七", i32::MAX);
    test!("負二十一億四千七百四十八萬三千六百四十八", i32::MIN);
    test!("四十二億九千四百九十六萬七千二百九十五", u32::MAX);
    test!("九百二十二兆三千三百七十二萬零三百六十八億五千四百七十七萬五千八百零七", i64::MAX);
    test!("負九百二十二兆三千三百七十二萬零三百六十八億五千四百七十七萬五千八百零八", i64::MIN);
    test!("一千八百四十四兆六千七百四十四萬零七百三十七億零九百五十五萬一千六百一十五", u64::MAX);
    test!("一百七十萬一千四百一十一京八千三百四十六萬零四百六十九億二千三百一十七萬三千一百六十八兆七千三百零三萬七千一百五十八億八千四百一十萬五千七百二十七",i128::MAX);
    test!("負一百七十萬一千四百一十一京八千三百四十六萬零四百六十九億二千三百一十七萬三千一百六十八兆七千三百零三萬七千一百五十八億八千四百一十萬五千七百二十八",i128::MIN);
    test!("三百四十萬二千八百二十三京六千六百九十二萬零九百三十八億四千六百三十四萬六千三百三十七兆四千六百零七萬四千三百一十七億六千八百二十一萬一千四百五十五",u128::MAX);

    test!("一百二十三四角六分", 123.456f32);
    test!("負一百二十三四角六分", -123.456f32);
    test!("一百二十三四角六分", 123.456f64);
    test!("負一百二十三四角六分", -123.456f64);
}
